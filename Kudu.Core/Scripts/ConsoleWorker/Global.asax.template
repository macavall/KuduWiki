<%@ Application Language="C#" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Runtime.CompilerServices" %>
<%@ Import Namespace="System.Runtime.InteropServices" %>
<%@ Import Namespace="System.Threading" %>

<script RunAt="server">

    /*
        This is a simple web application which purpose is to invoke a batch script and make sure it runs,
        Whenever the invoked process goes down it'll wait for 30 seconds and bring it back up.
        The web application will have it's own logs go to Trace and also the process' output/error will go there.
    */

    private const string WorkerRootEnvironmentKey = "WORKER_ROOT";
    private const string WorkerProcessEnvironmentKey = "THIS_IS_A_WORKER_PROCESS";

    private static readonly WorkerThread Worker = new WorkerThread();

    protected void Application_Start(object sender, EventArgs e)
    {
        Worker.Start(this);
    }

    protected void Application_BeginRequest(object sender, EventArgs e)
    {
        var httpApplication = sender as HttpApplication;
        if (httpApplication != null)
        {
            var response = httpApplication.Context.Response;
            response.Write(Worker.Status);
            response.End();
        }
    }

    protected void Application_End(object sender, EventArgs e)
    {
        Worker.Stop();
        Trace.TraceInformation("Worker went down at " + DateTime.UtcNow);
    }

    private class WorkerThread
    {
        private int _started = 0;
        private Thread _worker;
        private Process _process;
        private string _binPath;
        private string _tempBinPath;
        private TimeSpan _timeBetweenRuns;

        public string Status { get; private set; }

        public void Start(HttpApplication httpApplication)
        {
            if (Interlocked.Exchange(ref _started, 1) == 1)
            {
                return;
            }

            KillAllWorkerProcesses();

            Initialize(httpApplication);

            if (_worker != null)
            {
                _worker.Start();
            }
        }

        private void KillAllWorkerProcesses()
        {
            Process[] processes = Process.GetProcesses();
            foreach (Process process in processes)
            {
                StringDictionary processEnvironment = ProcessEnvironment.TryGetEnvironmentVariables(process);
                if (processEnvironment != null && processEnvironment.ContainsKey(WorkerProcessEnvironmentKey))
                {
                    try
                    {
                        process.Kill();
                    }
                    catch (Exception ex)
                    {
                        if (!process.HasExited)
                        {
                            TraceError("Failed to kill process: " + process.ProcessName + "\n" + ex);
                        }
                    }
                }
            }
        }

        private void Initialize(HttpApplication httpApplication)
        {
            TraceInformationAndStatus("Initializing worker...");

            string appDomainAppPath = HttpRuntime.AppDomainAppPath;
            var tempRootPath = Path.Combine(Path.GetTempPath(), "worker_temp");

            _binPath = Path.Combine(appDomainAppPath, "bin");
            _tempBinPath = Path.Combine(tempRootPath, Path.GetRandomFileName());

            if (!File.Exists(Path.Combine(_binPath, "run_worker.cmd")))
            {
                Status = "Missing run_worker.cmd file";
                Trace.TraceError(Status);
                return;
            }

            try
            {
                if (Directory.Exists(tempRootPath))
                {
                    Directory.Delete(tempRootPath, true);
                }
            }
            catch (Exception ex)
            {
                TraceError("Failed to delete temporary directory: " + ex);
            }

            try
            {
                CopyDirectoryRecursive(_binPath, _tempBinPath);
            }
            catch (Exception ex)
            {
                Status = "Worker is not running due to an error";
                TraceError("Failed to copy bin directory: " + ex);
                return;
            }

            int timeoutInSeconds = 0;

            var workerTimeout = ConfigurationManager.AppSettings["WORKER_TIMEOUT_IN_SECONDS"];
            if (workerTimeout != null)
            {
                int.TryParse(workerTimeout, out timeoutInSeconds);
            }

            if (timeoutInSeconds <= 0 || timeoutInSeconds > 60 * 60 * 24)
            {
                timeoutInSeconds = 30;
            }

            _timeBetweenRuns = TimeSpan.FromSeconds(timeoutInSeconds);

            _worker = new Thread(WorkerRun);
        }

        public void Stop()
        {
            Interlocked.Exchange(ref _started, 0);
            KillAllWorkerProcesses();
        }

        private void WorkerRun()
        {
            TraceInformationAndStatus("Starting worker...");

            while (_started == 1)
            {
                try
                {
                    using (_process = StartProcess(_tempBinPath, _binPath, "run_worker.cmd"))
                    {
                        Status = "Worker site is running...";
                        Trace.TraceInformation(Status);

                        while (!_process.WaitForExit(1000 * 60))
                        {
                            // Placeholder for possible debug breakpoint
                        }

                        string message = "Process exited with exit code: " + _process.ExitCode;

                        if (_process.ExitCode == 0)
                        {
                            Trace.TraceInformation(message);
                        }
                        else
                        {
                            Trace.TraceError(message);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Trace.TraceError("Process threw an exception: " + ex);
                }

                TraceInformationAndStatus("Process went down, Waiting for " + _timeBetweenRuns);
                WaitForTimeOrStop(_timeBetweenRuns);
            }
        }

        private void WaitForTimeOrStop(TimeSpan timeSpan)
        {
            var stopwatch = Stopwatch.StartNew();

            while (stopwatch.Elapsed < timeSpan && _started == 1)
            {
                Thread.Sleep(200);
            }
        }

        // From MSDN: http://msdn.microsoft.com/en-us/library/bb762914.aspx
        private static void CopyDirectoryRecursive(string sourceDirPath, string destinationDirPath)
        {
            // Get the subdirectories for the specified directory.
            var sourceDir = new DirectoryInfo(sourceDirPath);
            DirectoryInfo[] sourceSubDirs = sourceDir.GetDirectories();

            if (!sourceDir.Exists)
            {
                throw new DirectoryNotFoundException(
                    "Source directory does not exist or could not be found: "
                    + sourceDirPath);
            }

            // If the destination directory doesn't exist, create it. 
            if (!Directory.Exists(destinationDirPath))
            {
                Directory.CreateDirectory(destinationDirPath);
            }

            // Get the files in the directory and copy them to the new location.
            FileInfo[] sourceFiles = sourceDir.GetFiles();
            foreach (FileInfo sourceFile in sourceFiles)
            {
                string destinationFilePath = Path.Combine(destinationDirPath, sourceFile.Name);
                sourceFile.CopyTo(destinationFilePath, true);
            }

            // If copying subdirectories, copy them and their contents to new location. 
            foreach (DirectoryInfo sourceSubDir in sourceSubDirs)
            {
                string destinationSubDirPath = Path.Combine(destinationDirPath, sourceSubDir.Name);
                CopyDirectoryRecursive(sourceSubDir.FullName, destinationSubDirPath);
            }
        }

        private static Process StartProcess(string scriptPath, string binPath, string scriptName)
        {
            var psi = new ProcessStartInfo
            {
                FileName = "cmd",
                WorkingDirectory = scriptPath,
                RedirectStandardInput = true,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                CreateNoWindow = true,
                WindowStyle = ProcessWindowStyle.Hidden,
                UseShellExecute = false,
                ErrorDialog = false,
                Arguments = "/c " + scriptName
            };

            psi.EnvironmentVariables[WorkerRootEnvironmentKey] = binPath;
            psi.EnvironmentVariables[WorkerProcessEnvironmentKey] = "true";

            var process = new Process()
            {
                StartInfo = psi
            };

            process.EnableRaisingEvents = true;

            process.OutputDataReceived += (sender, e) =>
            {
                if (e.Data != null)
                {
                    Trace.TraceInformation(e.Data);
                }
            };

            process.ErrorDataReceived += (sender, e) =>
            {
                if (e.Data != null)
                {
                    Trace.TraceError(e.Data);
                }
            };

            process.Start();

            process.BeginErrorReadLine();
            process.BeginOutputReadLine();
            process.StandardInput.Close();

            return process;
        }

        private void TraceInformationAndStatus(string message)
        {
            Status = message;
            Trace.TraceInformation(message);
        }

        private void TraceError(string message)
        {
            Trace.TraceError(message);
        }
    }

    // Source: http://eazfuscator.blogspot.com/2011/06/reading-environment-variables-from.html
    internal static class ProcessEnvironment
    {
        public static StringDictionary GetEnvironmentVariables(Process process)
        {
            return GetEnvironmentVariablesCore(process.Handle);
        }

        public static StringDictionary TryGetEnvironmentVariables(Process process)
        {
            try
            {
                return GetEnvironmentVariables(process);
            }
            catch
            {
                return null;
            }
        }

        private static StringDictionary GetEnvironmentVariablesCore(IntPtr hProcess)
        {
            IntPtr penv = GetPenv(hProcess);

            int dataSize;
            if (!HasReadAccess(hProcess, penv, out dataSize))
            {
                throw new Exception("Unable to read environment block.");
            }

            const int maxEnvSize = 32767;
            if (dataSize > maxEnvSize)
            {
                dataSize = maxEnvSize;
            }

            var envData = new byte[dataSize];
            var res_len = IntPtr.Zero;
            bool b = WindowsApi.ReadProcessMemory(
                hProcess,
                penv,
                envData,
                new IntPtr(dataSize),
                ref res_len);

            if (!b || (int)res_len != dataSize)
            {
                throw new Exception("Unable to read environment block data.");
            }

            return EnvToDictionary(envData);
        }

        private static StringDictionary EnvToDictionary(byte[] env)
        {
            var result = new StringDictionary();

            int len = env.Length;
            if (len < 4)
            {
                return result;
            }

            int n = len - 3;
            for (int i = 0; i < n; ++i)
            {
                byte c1 = env[i];
                byte c2 = env[i + 1];
                byte c3 = env[i + 2];
                byte c4 = env[i + 3];

                if (c1 == 0 && c2 == 0 && c3 == 0 && c4 == 0)
                {
                    len = i + 3;
                    break;
                }
            }

            char[] environmentCharArray = Encoding.Unicode.GetChars(env, 0, len);

            for (int i = 0; i < environmentCharArray.Length; i++)
            {
                int startIndex = i;
                while ((environmentCharArray[i] != '=') && (environmentCharArray[i] != '\0'))
                {
                    i++;
                }
                if (environmentCharArray[i] != '\0')
                {
                    if ((i - startIndex) == 0)
                    {
                        while (environmentCharArray[i] != '\0')
                        {
                            i++;
                        }
                    }
                    else
                    {
                        string str = new string(environmentCharArray, startIndex, i - startIndex);
                        i++;
                        int num3 = i;
                        while (environmentCharArray[i] != '\0')
                        {
                            i++;
                        }
                        string str2 = new string(environmentCharArray, num3, i - num3);
                        result[str] = str2;
                    }
                }
            }

            return result;
        }

        private static bool TryReadIntPtr32(IntPtr hProcess, IntPtr ptr, out IntPtr readPtr)
        {
            bool result;
            RuntimeHelpers.PrepareConstrainedRegions();
            try
            {
            }
            finally
            {
                int dataSize = sizeof(Int32);
                var data = Marshal.AllocHGlobal(dataSize);
                IntPtr res_len = IntPtr.Zero;
                bool b = WindowsApi.ReadProcessMemory(
                    hProcess,
                    ptr,
                    data,
                    new IntPtr(dataSize),
                    ref res_len);
                readPtr = new IntPtr(Marshal.ReadInt32(data));
                Marshal.FreeHGlobal(data);
                if (!b || (int)res_len != dataSize)
                {
                    result = false;
                }
                else
                {
                    result = true;
                }
            }

            return result;
        }

        private static bool TryReadIntPtr(IntPtr hProcess, IntPtr ptr, out IntPtr readPtr)
        {
            bool result;
            RuntimeHelpers.PrepareConstrainedRegions();
            try
            {
            }
            finally
            {
                int dataSize = IntPtr.Size;
                var data = Marshal.AllocHGlobal(dataSize);
                IntPtr res_len = IntPtr.Zero;
                bool b = WindowsApi.ReadProcessMemory(
                    hProcess,
                    ptr,
                    data,
                    new IntPtr(dataSize),
                    ref res_len);

                readPtr = Marshal.ReadIntPtr(data);
                Marshal.FreeHGlobal(data);

                if (!b || (int)res_len != dataSize)
                {
                    result = false;
                }
                else
                {
                    result = true;
                }
            }

            return result;
        }

        private static IntPtr GetPenv(IntPtr hProcess)
        {
            int processBitness = GetProcessBitness(hProcess);

            if (processBitness == 64)
            {
                if (!Environment.Is64BitProcess)
                {
                    throw new InvalidOperationException(
                        "The current process should run in 64 bit mode to be able to get the environment of another 64 bit process.");
                }

                IntPtr pPeb = GetPeb64(hProcess);

                IntPtr ptr;
                if (!TryReadIntPtr(hProcess, pPeb + 0x20, out ptr))
                {
                    throw new Exception("Unable to read PEB.");
                }

                IntPtr penv;
                if (!TryReadIntPtr(hProcess, ptr + 0x80, out penv))
                {
                    throw new Exception("Unable to read RTL_USER_PROCESS_PARAMETERS.");
                }

                return penv;
            }
            else
            {
                IntPtr pPeb = GetPeb32(hProcess);

                IntPtr ptr;
                if (!TryReadIntPtr32(hProcess, pPeb + 0x10, out ptr))
                {
                    throw new Exception("Unable to read PEB.");
                }

                IntPtr penv;
                if (!TryReadIntPtr32(hProcess, ptr + 0x48, out penv))
                {
                    throw new Exception("Unable to read RTL_USER_PROCESS_PARAMETERS.");
                }

                return penv;
            }
        }

        private static int GetProcessBitness(IntPtr hProcess)
        {
            if (Environment.Is64BitOperatingSystem)
            {
                bool wow64;
                if (!WindowsApi.IsWow64Process(hProcess, out wow64))
                {
                    return 32;
                }
                if (wow64)
                {
                    return 32;
                }

                return 64;
            }
            else
            {
                return 32;
            }
        }

        private static IntPtr GetPeb32(IntPtr hProcess)
        {
            if (Environment.Is64BitProcess)
            {
                var ptr = IntPtr.Zero;
                int res_len = 0;
                int pbiSize = IntPtr.Size;
                int status = WindowsApi.NtQueryInformationProcess(
                    hProcess,
                    WindowsApi.ProcessWow64Information,
                    ref ptr,
                    pbiSize,
                    ref res_len);

                if (res_len != pbiSize)
                {
                    throw new Exception("Unable to query process information.");
                }

                return ptr;
            }
            else
            {
                return GetPebNative(hProcess);
            }
        }

        private static IntPtr GetPebNative(IntPtr hProcess)
        {
            var pbi = new WindowsApi.PROCESS_BASIC_INFORMATION();
            int res_len = 0;
            int pbiSize = Marshal.SizeOf(pbi);
            int status = WindowsApi.NtQueryInformationProcess(
                hProcess,
                WindowsApi.ProcessBasicInformation,
                ref pbi,
                pbiSize,
                ref res_len);

            if (res_len != pbiSize)
            {
                throw new InvalidOperationException("Unable to query process information.");
            }

            return pbi.PebBaseAddress;
        }

        private static IntPtr GetPeb64(IntPtr hProcess)
        {
            return GetPebNative(hProcess);
        }

        private static bool HasReadAccess(IntPtr hProcess, IntPtr address, out int size)
        {
            size = 0;

            var memInfo = new WindowsApi.MEMORY_BASIC_INFORMATION();
            int result = WindowsApi.VirtualQueryEx(
                hProcess,
                address,
                ref memInfo,
                Marshal.SizeOf(memInfo));

            if (result == 0)
            {
                return false;
            }

            if (memInfo.Protect == WindowsApi.PAGE_NOACCESS || memInfo.Protect == WindowsApi.PAGE_EXECUTE)
            {
                return false;
            }

            try
            {
                size = Convert.ToInt32(memInfo.RegionSize.ToInt64() - (address.ToInt64() - memInfo.BaseAddress.ToInt64()));
            }
            catch (OverflowException)
            {
                return false;
            }

            if (size <= 0)
            {
                return false;
            }

            return true;
        }

        private static class WindowsApi
        {
            [StructLayout(LayoutKind.Sequential, Pack = 1)]
            public struct PROCESS_BASIC_INFORMATION
            {
                public IntPtr Reserved1;
                public IntPtr PebBaseAddress;
                [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
                public IntPtr[] Reserved2;
                public IntPtr UniqueProcessId;
                public IntPtr Reserved3;
            }

            public const int ProcessBasicInformation = 0;
            public const int ProcessWow64Information = 26;

            [DllImport("ntdll.dll", SetLastError = true)]
            public static extern int NtQueryInformationProcess(
                IntPtr hProcess,
                int pic,
                ref PROCESS_BASIC_INFORMATION pbi,
                int cb,
                ref int pSize);

            [DllImport("ntdll.dll", SetLastError = true)]
            public static extern int NtQueryInformationProcess(
                IntPtr hProcess,
                int pic,
                ref IntPtr pi,
                int cb,
                ref int pSize);

            [DllImport("kernel32.dll", SetLastError = true)]
            public static extern bool ReadProcessMemory(
                IntPtr hProcess,
                IntPtr lpBaseAddress,
                [Out] byte[] lpBuffer,
                IntPtr dwSize,
                ref IntPtr lpNumberOfBytesRead);

            [DllImport("kernel32.dll", SetLastError = true)]
            public static extern bool ReadProcessMemory(
                IntPtr hProcess,
                IntPtr lpBaseAddress,
                IntPtr lpBuffer,
                IntPtr dwSize,
                ref IntPtr lpNumberOfBytesRead);

            [StructLayout(LayoutKind.Sequential)]
            public struct MEMORY_BASIC_INFORMATION
            {
                public IntPtr BaseAddress;
                public IntPtr AllocationBase;
                public int AllocationProtect;
                public IntPtr RegionSize;
                public int State;
                public int Protect;
                public int Type;
            }

            public const int PAGE_NOACCESS = 0x01;
            public const int PAGE_EXECUTE = 0x10;

            [DllImport("kernel32")]
            public static extern int VirtualQueryEx(IntPtr hProcess, IntPtr lpAddress, ref MEMORY_BASIC_INFORMATION lpBuffer, int dwLength);

            [DllImport("kernel32.dll")]
            public static extern bool IsWow64Process(IntPtr hProcess, out bool wow64Process);
        }
    }
</script>
