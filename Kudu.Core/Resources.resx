<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Copied" xml:space="preserve">
    <value>Copied '{0}'.</value>
  </data>
  <data name="Error_AmbiguousProjects" xml:space="preserve">
    <value>Unable to determine which project file to build. {0}.</value>
  </data>
  <data name="Error_AmbiguousSolutions" xml:space="preserve">
    <value>Unable to determine which solution file to build. {0}.</value>
  </data>
  <data name="Error_DeployNotFound" xml:space="preserve">
    <value>Unable to deploy '{0}'. No deployment found.</value>
  </data>
  <data name="Error_FailedToLocateGit" xml:space="preserve">
    <value>Unable to locate 'git.exe'. Make sure it is installed.</value>
  </data>
  <data name="Error_FailedToLocateSsh" xml:space="preserve">
    <value>Unable to locate 'ssh.exe'. Make sure it is installed.</value>
  </data>
  <data name="Error_NoLogFound" xml:space="preserve">
    <value>No log found for '{0}'.</value>
  </data>
  <data name="Error_ProjectDoesNotExist" xml:space="preserve">
    <value>The specified project '{0}' is not valid. It needs to point to either a csproj/vbproj file or to a directory.</value>
  </data>
  <data name="Error_ProjectNotDeployable" xml:space="preserve">
    <value>'{0}' is not a deployable project.</value>
  </data>
  <data name="Error_UnableToDeleteDeploymentActive" xml:space="preserve">
    <value>Unable to delete '{0}'. The deployment is currently active.</value>
  </data>
  <data name="Error_UnableToDeleteNoDeploymentFound" xml:space="preserve">
    <value>Unable to delete '{0}'. No deployment found.</value>
  </data>
  <data name="Error_UnableToSelectNodeVersion" xml:space="preserve">
    <value>Unable to select node.js version to run the application with.</value>
  </data>
  <data name="Error_UnsupportedStatus" xml:space="preserve">
    <value>Unsupported status '{0}'.</value>
  </data>
  <data name="IisNodeWebConfig" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;configuration&gt;
    &lt;system.webServer&gt;         
      &lt;handlers&gt;
           &lt;add name="iisnode" path="{0}" verb="*" modules="iisnode"/&gt;
     &lt;/handlers&gt;
      &lt;rewrite&gt;
           &lt;rules&gt;
                &lt;rule name="StaticContent"&gt;
                     &lt;action type="Rewrite" url="public{{REQUEST_URI}}"/&gt;
                &lt;/rule&gt;
                &lt;rule name="DynamicContent"&gt;
                     &lt;conditions&gt;
                          &lt;add input="{{REQUEST_FILENAME}}" matchType="IsFile" negate="True"/&gt;
                     &lt;/conditions&gt;
                     &lt;action type="Rewrite" url="{0}"/&gt;
                &lt;/rule&gt;
           &lt;/rules&gt;
      &lt;/rewrite&gt;
    &lt;iisnode 
      nodeProcessCommandLine="&amp;quot;%programfiles(x86)%\nodejs\node.exe&amp;quot;"
      debuggingEnabled="false"
      logDirectory="..\..\LogFiles\nodejs" 
      watchedFiles="*.js;iisnode.yml;node_modules\*;views\*.jade;views\*.ejb;routes\*.js" /&gt;
   &lt;/system.webServer&gt;
 &lt;/configuration&gt;</value>
  </data>
  <data name="Log_BuildingSolution" xml:space="preserve">
    <value>Building solution '{0}'.</value>
  </data>
  <data name="Log_BuildingWebProject" xml:space="preserve">
    <value>Building web project '{0}'.</value>
  </data>
  <data name="Log_CleaningGitRepository" xml:space="preserve">
    <value>Cleaning git repository.</value>
  </data>
  <data name="Log_CreatingNodeConfig" xml:space="preserve">
    <value>Deploying Web.config to enable Node.js activation.</value>
  </data>
  <data name="Log_DeploymentAlreadyActive" xml:space="preserve">
    <value>Deployment '{0}' already active.</value>
  </data>
  <data name="Log_DeploymentScriptGeneratorCommand" xml:space="preserve">
    <value>Using the following command to generate deployment script: 'azure {0}'.</value>
  </data>
  <data name="Log_DeploymentSuccessful" xml:space="preserve">
    <value>Deployment successful.</value>
  </data>
  <data name="Log_GeneratingDeploymentScript" xml:space="preserve">
    <value>Generating deployment script.</value>
  </data>
  <data name="Log_NewDeploymentReceived" xml:space="preserve">
    <value>New deployment received.</value>
  </data>
  <data name="Log_NoDeployableProjects" xml:space="preserve">
    <value>Found solution '{0}' with no deployable projects. Deploying files instead.</value>
  </data>
  <data name="Log_NodeWithMissingServerJs" xml:space="preserve">
    <value>WARNING: Application appears to be a node.js application but no server.js is present. If it is a node application, please rename your startup js file to server.js and re-publish your application.</value>
  </data>
  <data name="Log_NpmNotInstalled" xml:space="preserve">
    <value>NPM not installed or couldn't be located. Skipping package installation.</value>
  </data>
  <data name="Log_PackagesAlreadyInstalled" xml:space="preserve">
    <value>Packages already installed.</value>
  </data>
  <data name="Log_PreparingDeployment" xml:space="preserve">
    <value>Preparing deployment for commit id '{0}'.</value>
  </data>
  <data name="Log_PreparingFiles" xml:space="preserve">
    <value>Preparing files for deployment.</value>
  </data>
  <data name="Log_RunningNPM" xml:space="preserve">
    <value>Running NPM.</value>
  </data>
  <data name="Log_SelectNodeJsVersion" xml:space="preserve">
    <value>Selecting nodejs version.</value>
  </data>
  <data name="Log_UnexpectedBranchPushed" xml:space="preserve">
    <value>Deployment skipped. Received '{0}' branch, and only pushes to '{1}' are deployed.</value>
  </data>
  <data name="Log_UnexpectedError" xml:space="preserve">
    <value>An unknown error has occurred. Check the diagnostic log for details.</value>
  </data>
  <data name="Log_UpdatingBranch" xml:space="preserve">
    <value>Updating branch '{0}'.</value>
  </data>
  <data name="Log_UpdatingSubmodules" xml:space="preserve">
    <value>Updating submodules.</value>
  </data>
  <data name="Log_UsingWebsiteProject" xml:space="preserve">
    <value>Using website project '{0}'.</value>
  </data>
  <data name="Status_BuildingAndDeploying" xml:space="preserve">
    <value>Building and Deploying '{0}'.</value>
  </data>
</root>